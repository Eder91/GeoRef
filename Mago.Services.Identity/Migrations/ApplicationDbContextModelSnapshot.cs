// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using UsersAPI.DbContexts;

#nullable disable

namespace Mago.Services.Identity.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("UsersAPI.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Fecha_Creacion")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "a394068a-6886-4b97-8ff9-9a177fb6451c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b69c95dc-b24e-444d-b57e-c65ecd034199",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2005, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "PORCICULTORES EL HIBRIDO S DE RL",
                            PhoneNumberConfirmed = false,
                            RFC = "PHI0501116U3",
                            SecurityStamp = "15dd0f18-284c-4637-9c53-f8207beb087c",
                            TwoFactorEnabled = false,
                            idUsuario = 1
                        },
                        new
                        {
                            Id = "dfd7a735-92ea-4b02-bce4-e0d9fe3a92e5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "41f93cc8-bde2-455f-8391-cf9c0173fe23",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2000, 1, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "AGROPECUARIA EL GIGANTE S.A. DE C.V.",
                            PhoneNumberConfirmed = false,
                            RFC = "AGI000114C70",
                            SecurityStamp = "084f3f25-03fc-4428-8358-25064856765c",
                            TwoFactorEnabled = false,
                            idUsuario = 2
                        },
                        new
                        {
                            Id = "7785a58b-6be1-476e-97b6-ea70de8a4228",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23d26ea6-7efe-4ba0-9085-9302026d548e",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2004, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "PROVEEDORES AGROALIMENTARIOS DEL DISTRITO DE RIEGO 01 SPR DE RL",
                            PhoneNumberConfirmed = false,
                            RFC = "PAD0405282B1",
                            SecurityStamp = "c72b4a99-a547-401b-be13-2da001d7709f",
                            TwoFactorEnabled = false,
                            idUsuario = 3
                        },
                        new
                        {
                            Id = "6e033ad4-ad33-4334-b6ce-e920a7d90b83",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fc1cd745-cf02-45eb-8fbd-310c7f1cd810",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(1997, 11, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "EL SILOGISMO SPR DE RL",
                            PhoneNumberConfirmed = false,
                            RFC = "SIL971106652",
                            SecurityStamp = "9da27bfd-9d0c-4e11-8222-cdd97dc758c8",
                            TwoFactorEnabled = false,
                            idUsuario = 4
                        },
                        new
                        {
                            Id = "9bc87bbc-e214-4e52-8065-1825e1313b06",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39c7dcf1-03ec-4ee7-9d78-faf389756ad5",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2005, 7, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "PRODUCTORES UNIDOS DE LAGOS, S.C. DE R.L. DE C.V.",
                            PhoneNumberConfirmed = false,
                            RFC = "PUL0507113N6",
                            SecurityStamp = "f1e4b527-f176-4ae8-b3fc-adcd80c377f2",
                            TwoFactorEnabled = false,
                            idUsuario = 5
                        },
                        new
                        {
                            Id = "c557a079-5b72-4141-b45f-05b05b715f03",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "08f4a292-1706-45fc-bda6-4d1ca8add1c2",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2006, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "ALIMENTOS PROCESADOS EL ZARCO S DE R.L. M.I. DE C.V.",
                            PhoneNumberConfirmed = false,
                            RFC = "APZ060201412",
                            SecurityStamp = "2c14a66c-133e-4335-8f78-70ebd29a322d",
                            TwoFactorEnabled = false,
                            idUsuario = 6
                        },
                        new
                        {
                            Id = "de9774ac-289d-4295-8397-7c1a267b9bae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2bba5118-9afe-4b18-8b93-96186b81bca9",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(1995, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "HSBC MEXICO S.A., INSTITUCION DE BANCA MULTIPLE GRUPO FINANCIERO HSBC",
                            PhoneNumberConfirmed = false,
                            RFC = "HMI950125KG8",
                            SecurityStamp = "b1726154-51fd-458d-a0b0-eb63bfaed411",
                            TwoFactorEnabled = false,
                            idUsuario = 7
                        },
                        new
                        {
                            Id = "480ff59e-8b24-4c0a-9b01-fa4ece96e44b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a445dc16-da6d-49c2-981e-427aef3859ab",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2005, 11, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "UNION GANADERA LAS TROJES",
                            PhoneNumberConfirmed = false,
                            RFC = "UGD0511148J3",
                            SecurityStamp = "25b257f4-99ab-48ea-af87-7add0c0069d0",
                            TwoFactorEnabled = false,
                            idUsuario = 8
                        },
                        new
                        {
                            Id = "a2eb1d03-3ca2-4ec3-8d9f-44627ec4d20b",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "b42603b6-f0b4-4a4e-8083-50faa62048db",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2005, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "QUESOS LOS MARTINEZ, S. DE R.L. M.I. DE C.V.",
                            PhoneNumberConfirmed = false,
                            RFC = "QMA050614F17",
                            SecurityStamp = "0c642e54-bfd8-45b4-9b5a-950f28e30f07",
                            TwoFactorEnabled = false,
                            idUsuario = 9
                        },
                        new
                        {
                            Id = "e3c3751b-64cd-4b7d-b1ea-5b693bb594c2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55b21dd5-33e3-44d7-9d88-68fa6c78fa3d",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(1998, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "RANCHO MEDIO KILO, S. P.R. DE R.L.",
                            PhoneNumberConfirmed = false,
                            RFC = "RMK9802033P7",
                            SecurityStamp = "5bb968cc-a168-4819-87d2-1681ff759602",
                            TwoFactorEnabled = false,
                            idUsuario = 10
                        },
                        new
                        {
                            Id = "b58f0eed-07d6-475c-8846-caee0d19c41d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "89ac9246-44ef-4fe1-a64e-a4cce706799c",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2002, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "MARTIN RUIZ BERNAL, S. DE P.R. DE R.L.",
                            PhoneNumberConfirmed = false,
                            RFC = "MRB0112136W7",
                            SecurityStamp = "50d15c76-6429-4c8c-a3e5-004637b780ad",
                            TwoFactorEnabled = false,
                            idUsuario = 11
                        },
                        new
                        {
                            Id = "6d0c7dd4-86e8-408d-8895-3147c10d178c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "39ec6785-0c4d-404b-bd33-66a8d7236050",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2006, 2, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "CHIVOS Y BORREGOS DE AGUASCALIENTES, S.P.R. DE R.L",
                            PhoneNumberConfirmed = false,
                            RFC = "CBA051107TKA",
                            SecurityStamp = "5dc0339b-ada7-42d1-9391-455123f25435",
                            TwoFactorEnabled = false,
                            idUsuario = 12
                        },
                        new
                        {
                            Id = "781264a3-b62d-43b8-ab1d-a783e9d8779c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f51d89dd-7ef6-453f-8c8d-955937fb92bd",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2002, 12, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "GANADEROS UNIDOS DE TEQUILILLA",
                            PhoneNumberConfirmed = false,
                            RFC = "GUT021209P8G",
                            SecurityStamp = "25fc164b-2087-4874-ae99-3419575806a3",
                            TwoFactorEnabled = false,
                            idUsuario = 13
                        },
                        new
                        {
                            Id = "e60ff932-0236-45fe-aa40-00be64053616",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a0cdd06a-db9e-49dd-809e-56d839771585",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(1999, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "COMUNIDAD PRODUCTORA 2000, S.P.R.DE R.L.",
                            PhoneNumberConfirmed = false,
                            RFC = "CPD9912105S7",
                            SecurityStamp = "6210b3e6-b459-4905-a4a7-6a8c191d6409",
                            TwoFactorEnabled = false,
                            idUsuario = 14
                        },
                        new
                        {
                            Id = "3d2435f1-8c1a-4a6d-b697-b90611e3377d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aaf65c8f-447f-4c64-bd1e-f4b13e07b51d",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2003, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "INOVAGRO, S.A. DE C.V.",
                            PhoneNumberConfirmed = false,
                            RFC = "INO030616JN5",
                            SecurityStamp = "378ed4ae-a0a7-47e6-a5d7-90bd257a89b3",
                            TwoFactorEnabled = false,
                            idUsuario = 15
                        },
                        new
                        {
                            Id = "0e73b970-2745-4188-ad9b-48dde90380ae",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5ff7eabb-2668-4f90-87e7-f36197e36043",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2006, 6, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "GANADERIA LA GREÑUDA, S.C. DE R.L.",
                            PhoneNumberConfirmed = false,
                            RFC = "GGR060624JV4",
                            SecurityStamp = "29e56b18-f9ee-4c4e-8625-00f43a8d7a39",
                            TwoFactorEnabled = false,
                            idUsuario = 16
                        },
                        new
                        {
                            Id = "07bcfb3d-2a66-4dd4-b066-ea3b50086d96",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4267bba9-bec5-407c-ba54-ce255dfc0894",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2005, 10, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "PRODUCTORES DE LA ESTANCIA DE CUQUIO, S.C.  DE  R.L.",
                            PhoneNumberConfirmed = false,
                            RFC = "PEC051021HX7",
                            SecurityStamp = "032ca67d-0b9b-4c56-99e7-9974657dabfb",
                            TwoFactorEnabled = false,
                            idUsuario = 17
                        },
                        new
                        {
                            Id = "9db60ea4-c082-49be-a41c-f6f4227df59d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "63cb62bb-b55e-4d7d-8af5-472218d81548",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2004, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "GRANJA EL 13 DE LOS ACUÑA, S.P.R.  DE  R.L.",
                            PhoneNumberConfirmed = false,
                            RFC = "GTA040327Q39",
                            SecurityStamp = "64b0c2de-bb6d-4c88-8b95-adc86d281aa3",
                            TwoFactorEnabled = false,
                            idUsuario = 18
                        },
                        new
                        {
                            Id = "3661ca1e-467a-41c1-a30d-6c336894133a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5530921a-9740-4358-89ab-afa025783d9d",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2002, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "EL GREÑERO, S. DE R.L. DE C.V.",
                            PhoneNumberConfirmed = false,
                            RFC = "GRE0205086JA",
                            SecurityStamp = "6773b697-0c76-4870-bb6d-6e5450f161b9",
                            TwoFactorEnabled = false,
                            idUsuario = 19
                        },
                        new
                        {
                            Id = "f06ef08b-72fc-4ca3-9b30-9371e2a3e8f7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e1046be5-0961-4340-ba1e-a7ce60497352",
                            EmailConfirmed = false,
                            Fecha_Creacion = new DateTime(2001, 11, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            Nombre = "AGRASISA, S.A. DE C.V.",
                            PhoneNumberConfirmed = false,
                            RFC = "AGR011109ST4",
                            SecurityStamp = "26cd0aed-e937-410d-bc4e-4fb31d43e005",
                            TwoFactorEnabled = false,
                            idUsuario = 20
                        });
                });

            modelBuilder.Entity("UsersAPI.Models.Estados", b =>
                {
                    b.Property<int>("idEstado")
                        .HasColumnType("int");

                    b.Property<string>("Clave_Fiscal")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("idEstado");

                    b.ToTable("Estados", null, t => t.ExcludeFromMigrations());
                });

            modelBuilder.Entity("UsersAPI.Models.UsuariosRelEstado", b =>
                {
                    b.Property<int>("idPermiso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPermiso"), 1L, 1);

                    b.Property<int>("idEstado")
                        .HasColumnType("int");

                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("idPermiso");

                    b.HasIndex("idEstado");

                    b.ToTable("UsuariosRelEstados");

                    b.HasData(
                        new
                        {
                            idPermiso = 1,
                            idEstado = 1,
                            idUsuario = 1
                        },
                        new
                        {
                            idPermiso = 2,
                            idEstado = 5,
                            idUsuario = 2
                        },
                        new
                        {
                            idPermiso = 3,
                            idEstado = 25,
                            idUsuario = 3
                        },
                        new
                        {
                            idPermiso = 4,
                            idEstado = 14,
                            idUsuario = 4
                        },
                        new
                        {
                            idPermiso = 5,
                            idEstado = 28,
                            idUsuario = 5
                        },
                        new
                        {
                            idPermiso = 6,
                            idEstado = 5,
                            idUsuario = 6
                        },
                        new
                        {
                            idPermiso = 7,
                            idEstado = 5,
                            idUsuario = 7
                        },
                        new
                        {
                            idPermiso = 8,
                            idEstado = 5,
                            idUsuario = 8
                        },
                        new
                        {
                            idPermiso = 9,
                            idEstado = 1,
                            idUsuario = 9
                        },
                        new
                        {
                            idPermiso = 10,
                            idEstado = 25,
                            idUsuario = 10
                        },
                        new
                        {
                            idPermiso = 11,
                            idEstado = 14,
                            idUsuario = 11
                        },
                        new
                        {
                            idPermiso = 12,
                            idEstado = 28,
                            idUsuario = 12
                        },
                        new
                        {
                            idPermiso = 13,
                            idEstado = 28,
                            idUsuario = 13
                        },
                        new
                        {
                            idPermiso = 14,
                            idEstado = 28,
                            idUsuario = 14
                        },
                        new
                        {
                            idPermiso = 15,
                            idEstado = 14,
                            idUsuario = 15
                        },
                        new
                        {
                            idPermiso = 16,
                            idEstado = 14,
                            idUsuario = 16
                        },
                        new
                        {
                            idPermiso = 17,
                            idEstado = 1,
                            idUsuario = 17
                        },
                        new
                        {
                            idPermiso = 18,
                            idEstado = 25,
                            idUsuario = 18
                        },
                        new
                        {
                            idPermiso = 19,
                            idEstado = 25,
                            idUsuario = 19
                        },
                        new
                        {
                            idPermiso = 20,
                            idEstado = 1,
                            idUsuario = 20
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("UsersAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("UsersAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UsersAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("UsersAPI.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UsersAPI.Models.UsuariosRelEstado", b =>
                {
                    b.HasOne("UsersAPI.Models.Estados", "Estados")
                        .WithMany()
                        .HasForeignKey("idEstado")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Estados");
                });
#pragma warning restore 612, 618
        }
    }
}
